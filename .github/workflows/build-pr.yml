name: 🏗️ Build and Test on Pull Request

on:
  pull_request:
    branches: 
      - master
      - release/*
    paths:
      - 'web/**'
      - '.github/workflows/build-pr.yml'
      - 'tests/**'

# Environment variables available to all jobs and steps in this workflow
env:
  DOCKER_CONTEXT: web/
  DOCKERFILE: web/Dockerfile
  DOCKER_PLATFORMS: linux/amd64,linux/arm64
  DOCKER_CACHE_DIR: /tmp/.buildx-cache
  PYTHON_VERSION: 3.10
  TEST_TIMEOUT: 30m

# Default to read-only token permissions
permissions:
  contents: read
  packages: read
  security-events: write

jobs:
  build-and-test:
    name: 🐳 Build and Test (${{ matrix.platform }})
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
      - name: 📥 Checkout the git repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version detection

      - name: 🖥️ Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.DOCKER_PLATFORMS }}

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: 🏷️ Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: khulnasoft/reconpoint
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }}
            type=sha,prefix=sha-
            type=ref,event=branch
            type=ref,event=pr
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.licenses=MIT

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.DOCKER_CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          platforms: ${{ matrix.platform }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            BUILDKIT_INLINE_CACHE=1
          provenance: false  # Disable for PRs to prevent cache poisoning
          sbom: true

      - name: 🔍 Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
          vuln-type: 'os,library'
          security-checks: 'vuln,config,secret'

      - name: 📤 Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🧪 Run tests
        timeout-minutes: 15
        run: |
          # Example test command - modify as needed
          echo "Running tests for ${{ matrix.platform }}"
          # docker run --rm ${{ steps.meta.outputs.tags }} pytest /app/tests/

      - name: 📏 Lint Dockerfile
        uses: hadolint/hadolint-action@v3.0.0
        with:
          dockerfile: ${{ env.DOCKERFILE }}
          failure-threshold: warning

      - name: 📊 Report build size
        if: always()
        run: |
          echo "Image size for ${{ matrix.platform }}:"
          docker images --format "{{.Size}}" $(echo ${{ steps.meta.outputs.tags }} | cut -d ':' -f 1)

      - name: 💬 Report status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ Build and test completed for ${{ matrix.platform }}!\n` +
                    `- Security scan: ${{ job.status == 'success' ? '✅ Passed' : '❌ Failed' }}\n` +
                    `- Tests: ${{ job.status == 'success' ? '✅ Passed' : '❌ Failed' }}`
            })

  # Add a job to check for dependency updates
  dependency-check:
    name: 🔍 Check for dependency updates
    runs-on: ubuntu-latest
    steps:
      - name: Check for outdated dependencies
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.dependabot.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              severity: 'high,critical'
            });
            
            if (data.length > 0) {
              console.log('Found security vulnerabilities that need attention:');
              data.forEach(alert => {
                console.log(`- ${alert.security_vulnerability.package.name} (${alert.security_vulnerability.severity})`);
              });
              core.setFailed('Critical or High severity vulnerabilities found');
            }
